Studio 8 write up

Your TA's name:



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1. Di Ai			458749(d.ai)
2. Zhanyi Yao	455878(zhanyi.yao)
3.
4.
5.
6.


What distribution do you see plotted (in the histogram or an XY Scatter plot) for Color hashcodes?
Uniform Distribution


If the distribution were not uniform, what would the plot look like?
skew to the left or right

How many Color objects are added to the set? 3

How many objects are contained in the set after all Color objects are added? 2

Why are the above two numbers different?
Because there are two colors that have the same rgb value, so they are equal to each other. Set does not allow duplicates, so there are only 2 objects in the set.



Are the Point objects' hash values distributed uniformly?
No


How many Point objects are added to the set?
2


How many Point objects are in the set after all Point objects are added?
2


What is wrong with this result? 
The two points have the same X and Y value, so they should be equal to each other, which means there are duplicates in the set.

Based on the code you see in Point, how is equality determined between two Point objects?
True scenarios: this == obj, other than false scenarios
False scenarios: obj == null, class(this) != class(obj), this.x == obj.x, this.y == obj.y
So if two Point objects are equal to each other, they must have same class, same x and y values, should not be nulls, and expected this == obj


Looking at the output in the console window, how does the implementation of hashCode() for Point explain the bad behavior in the set of Points?
Because the hashCode() of the Point is using the random number. And there is high chance that two random numbers are not equal to each other, so despite the two 
Point Objects are equal to each other but they have different hashCode, so Java will treat them as different objects.


How well does your hash function fare in terms of uniformly distributed hash values for the random point objects?
Let hashCode of the Point be x+y


As a team, try out some ideas for Pancake's hashCode() implementation. Record your best idea in the studio8.txt file (here!):
	public int hashCode(){
		int hash = radius;
		if (wheat){
			hash = hash + 5;
		}
		return hash;
	}



Based on the hashCode() implementation shown to you on the web page, answer the following questions:

If two Pancake objects equal each other, will they get the same hashCode() results?
They will have the same hashCode

How good of a job does the implementation do of obtaining uniform distributions of hashCode() values for two Pancake objects that do not equal each other?
If one pancake is 5 units in radius smaller than the other, but its wheat is TRUE, the two pancakes will have the same hashCode() results.

Just by inspection of the hashCode() method on the web page, state two Pancakes that are different yet have the same hashCode() value.
If one pancake is 5 units in radius smaller than the other, but its wheat is TRUE, the two pancakes will have the same hashCode() results.

Your best hashCode() for Pancake (paste the method here please):
	public int hashCode(){
		int hash = radius;
		if (wheat){
			hash = -radius;
		}
		return hash;
	}




Do your hashCode() values for Pancake appear to be uniformly distributed?
Yes.



Your implementation of Syrup's hashCode() -- paste here:
	public int hashCode(){
		return brand.hashCode() + (int)density;
	}






How uniformly distributed are your Syrup hashCode() values?
There are few spikes, but overall it is uniform distributed.


How uniformly distributed are your PancakeAndSyrup hashCode() values?
Not too bad uniformly distributed.












